
1 - Generar una función que retorne cuantos años tiene una persona.


CREATE OR REPLACE FUNCTION calcular_edad(persona_birthdate DATE) RETURN NUMBER IS
    var_edad NUMBER;
BEGIN
    SELECT TRUNC(MONTHS_BETWEEN(SYSDATE, persona_birthdate) / 12)
    INTO var_edad
    FROM dual;
    
    RETURN var_edad;
END;


SELECT calcular_edad(birthdate) AS edad
FROM persons WHERE persons_id =1;

///////////////////////////////////////////////////////

2 - los niños y viejos y enfermos no pueden trabajar en la mina. por ello cree un trigger que
sea capaz de garantizar que ningún empleado viole esas restricciones.
Nota: niño es considerado inferior a 12 años y un viejo es alguien mayor de 70 años
Recuerda que no se admiten personas enfermas.


CREATE OR REPLACE TRIGGER 
tr_rest_mina
BEFORE INSERT OR UPDATE ON workers FOR EACH ROW
DECLARE
var_edad_persona DAte;
fecha_actual DATE;
edad number(2);
VAR_ESTADO NUMBER;
BEGIN
SELECT birthdate INTO var_edad_persona FROM persons WHERE persons_id=:new.persons_id;
SELECT DIAGNOSTICS_ID INTO VAR_ESTADO FROM PERSONS_MEDICAL_CHECK WHERE PERSONS_ID=:NEW.PERSONS_ID;
fecha_actual:=sysdate;
EDAD:= (FECHA_ACTUAL-VAR_edad_persona)/365;
CASE
WHEN edad<12 OR EDAD>70 then
RAISE_APPLICATION_ERROR(-20001,'En la mina no se permiten niños ni ancianos');

WHEN VAR_ESTADO !=1 THEN
RAISE_APPLICATION_ERROR(-20001,'En la mina no se permiten enfermos o con deficiencias');
END CASE;
END;



///////////////////////////////////////////////////////


3 - Cree un procedimiento que registre un trabajador. tabla: workers Nota: validar que la
persona exista antes de registrar como trabajador.


CREATE OR REPLACE PROCEDURE 
registrar_worker(
  var_WORKERS_ID workers.WORKERS_ID%type,
  var_MINES_ID workers.MINES_ID%type,
  var_PERSONS_ID workers.PERSONS_ID%type
)
AS
  var_val_id number;
BEGIN
  SELECT COUNT(*) INTO var_val_id FROM persons WHERE persons_id = var_PERSONS_ID;
    IF var_val_id = 0 THEN
        RAISE_APPLICATION_ERROR(-20001,'No existe la persona en la base de datos.');
    ELSE
        INSERT INTO WORKERS VALUES (var_WORKERS_ID, var_MINES_ID, var_PERSONS_ID, sysdate);
        DBMS_OUTPUT.PUT_LINE('Registrado Correctamente');    
    END IF;
END;

EXECUTE registrar_worker(2436780,2,24398);


///////////////////////////////////////////////////////


4 - crear un cursor que muestre el id, nombre, apellido, fecha de nacimiento de todas las
mujeres que trabajan en una mina, la mina debe ser indicada por entrada de teclado.


create or replace procedure prc_4
(mina mines.MINE_NAME%type )
as
begin
for i in(SELECT p.persons_id as per_, p.name as name_, p.lastname as last_, p.birthdate as birth_
FROM persons p 
INNER JOIN workers w ON p.persons_id = w.persons_id 
INNER JOIN mines m ON w.mines_id = m.mines_id 
WHERE LOWER(m.mine_name) = LOWER(mina) AND p.sex = 'F') LOOP
DBMS_OUTPUT.PUT_LINE('ID_MUJER: '||i.per_||' |NOMBRE: '||i.name_||' |APELLIDOS: '||i.last_||' |FECHA_NACIMIENTO: '||i.birth_);
END LOOP;
END;

EXECUTE prc_4('&mina')



///////////////////////////////////////////////////////


5 - crear una función que retorne si un trabajador está vivo o muerto.



CREATE OR REPLACE FUNCTION 
vivo_o_muerto(trabajador workers.workers_id%TYPE)
RETURN VARCHAR2
IS
  var_1 NUMBER;
  var_boolean boolean;
BEGIN
  BEGIN
  var_boolean:=true;
    SELECT persons_id into var_1 FROM persons_defuntions WHERE persons_id=trabajador;
   RETURN 'EL TRABAJADOR CON ID: '||trabajador||' PERDIO LA VIDA';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      var_boolean:=false;
      RETURN 'EL TRABAJADOR CON ID: '||trabajador||' SE ENCUENTRA CON VIDA';
  END;
END;
SELECT vivo_o_muerto(39452) from dual;




///////////////////////////////////////////////////////



6 - crear una función que retorne la cantidad de kilos que produce de una mina.


CREATE OR REPLACE FUNCTION kilsMina(id_mina mines.mine_id%TYPE)
RETURN NUMBER
    IS 
      cantKgMina NUMBER;
    BEGIN
      select sum(p.kg_product) into cantKgMina
      from product_worker p 
      inner join  mines m  on p.producst_id=m.mine_id 
      where producst_id= id_mina;
    RETURN cantKgMina;
END  kilsMina;

select kilsMina(1)from dual


///////////////////////////////////////////////////////


7 - Generar un CURSOR de trabajadores que muestre:
id, nombre, apellido, sexo, edad
de todos los menores de edad que han muerto.



set SERVEROUTPUT on;
DECLARE
    var_id persons.persons_id%type;
    var_name persons.name%type;
    var_lastname persons.lastname%type;
    var_sex persons.sex%type;
    var_age number;
    CURSOR cu_cursor IS
        SELECT p.persons_id,p.name,p.lastname,p.sex,
        EXTRACT(year from current_date) - EXTRACT(year from birthdate)
        FROM persons p
        INNER JOIN workers w on p.persons_id = w.persons_id
        INNER JOIN persons_defuntions pf
        ON W.persons_id =pf.persons_id
        WHERE extract(year from current_date) - extract(year from birthdate) < 18;
BEGIN
    OPEN cu_cursor ;
    LOOP
        FETCH cu_cursor INTO var_id,var_name,
            var_lastname,var_sex,var_age;
            EXIT WHEN cu_cursor%NOTFOUND;
            dbms_output.put_line(
            ' ID: '|| var_id || ' NAME: ' || var_name
            ||' LASTNAME: '|| var_lastname || ' SEX: ' ||
            var_sex || ' AGE: ' || var_age
            );
    END LOOP;
END;



///////////////////////////////////////////////////////


8 - Generar un procedimiento que dando el nombre una mina que se ingresa por teclado
retorne la cantidad de trabajadores infectados con VIH.


CREATE OR REPLACE PROCEDURE infectionsVIH(var_mine mines.mine_name%type)
AS
    varCantVih NUMBER;
    BEGIN
        select COUNT(*)into varCantVih 
        from workers  w
        inner join persons p on w.persons_id=p.persons_id
        inner join persons_medical_check pmc on pmc.persons_id=w.persons_id and pmc.diagnostics_id=1
        inner join mines m on w.mines_id=m.mine_id where mine_name=var_mine;
        dbms_output.put_line('LA CANTIDAD DE INFECTADOS CON VIH ES DE :'||varCantVih);
END infectionsVIH;
EXECUTE infectionsVIH('Cameroon')


///////////////////////////////////////////////////////


9 - Cree un procedimiento que muestre el mejor trabajador de cada mina


SET SERVEROUTPUT ON;
CREATE OR REPLACE PROCEDURE mejor_worker
AS
var_persona VARCHAR(200);
BEGIN
FOR I IN (
SELECT m1.mine_name AS mina, q1.persons_id AS persona, MAX(q1.suma) AS kg_recolectados
FROM (
SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma
FROM product_worker pw
INNER JOIN mines M ON pw.products_id = M.products_id
GROUP BY M.mine_name, pw.persons_id
)  q1
INNER JOIN (
SELECT mine_name, MAX(suma) AS max_suma
FROM (
SELECT M.mine_name, pw.persons_id, SUM(pw.kg_product) AS suma
FROM product_worker pw
INNER JOIN mines M ON pw.products_id = M.products_id
GROUP BY M.mine_name, pw.persons_id
)  
GROUP BY mine_name
)  m1 ON q1.mine_name = m1.mine_name AND q1.suma = m1.max_suma
GROUP BY m1.mine_name, q1.persons_id
) LOOP
SELECT NAME INTO var_persona FROM persons WHERE PERSONS_ID= I.persona;
DBMS_OUTPUT.PUT_LINE('NOMBRE: '||var_persona||' |ID: '||I.persona||' |FUE EL MEJOR TRABAJADOR DE LA MINA DE '||UPPER(I.mina)||' |RECOLECTÓ: '||I.kg_recolectados||'KG DE LOS PRODUCTOS');
END LOOP;
END;

















